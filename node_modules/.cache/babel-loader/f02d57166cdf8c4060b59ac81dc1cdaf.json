{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/akram/Desktop/facerecognitionbrain/src/App.js\";\nimport { Component } from 'react';\nimport Particles from 'react-particles-js';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport { ClarifaiStub, grpc } from 'clarifai-nodejs-grpc';\nconst stub = ClarifaiStub.grpc(); // This will be used by every Clarifai endpoint call.\n\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key {YOUR_CLARIFAI_API_KEY}\");\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 80,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.onInputChange = event => {\n      console.log(event.target.value);\n    };\n\n    this.onButtonSubmit = () => {\n      console.log('clicked');\n      stub.PostModelOutputs({\n        model_id: \"{THE_MODEL_ID}\",\n        version_id: \"{THE_MODEL_VERSION_ID}\",\n        // This is optional. Defaults to the latest model version.\n        inputs: [{\n          data: {\n            image: {\n              url: \"https://samples.clarifai.com/metro-north.jpg\"\n            }\n          }\n        }]\n      }, metadata, (err, response) => {\n        if (err) {\n          throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n          throw new Error(\"Post model outputs failed, status: \" + response.status.description);\n        } // Since we have one input, one output will exist here.\n\n\n        const output = response.outputs[0];\n        console.log(\"Predicted concepts:\");\n\n        for (const concept of output.data.concepts) {\n          console.log(concept.name + \" \" + concept.value);\n        }\n      });\n    };\n\n    this.state = {\n      input: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Particles, {\n        className: \"particles\",\n        params: particlesOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/akram/Desktop/facerecognitionbrain/src/App.js"],"names":["Component","Particles","Navigation","Logo","ImageLinkForm","Rank","ClarifaiStub","grpc","stub","metadata","Metadata","set","particlesOptions","particles","number","value","density","enable","value_area","App","constructor","onInputChange","event","console","log","target","onButtonSubmit","PostModelOutputs","model_id","version_id","inputs","data","image","url","err","response","Error","status","code","description","output","outputs","concept","concepts","name","state","input","render"],"mappings":"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","sourcesContent":["import { Component } from 'react';\nimport Particles from 'react-particles-js';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport {ClarifaiStub, grpc} from 'clarifai-nodejs-grpc';\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call.\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"Key {YOUR_CLARIFAI_API_KEY}\");\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 80,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n}\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n      input:'',\n    }\n  }\n  onInputChange=(event)=>{\n    console.log(event.target.value);\n  }\n\n  onButtonSubmit=()=>{\n    console.log('clicked');\n    stub.PostModelOutputs(\n      {\n          model_id: \"{THE_MODEL_ID}\",\n          version_id: \"{THE_MODEL_VERSION_ID}\",  // This is optional. Defaults to the latest model version.\n          inputs: [\n              {data: {image: {url: \"https://samples.clarifai.com/metro-north.jpg\"}}}\n          ]\n      },\n      metadata,\n      (err, response) => {\n          if (err) {\n              throw new Error(err);\n          }\n  \n          if (response.status.code !== 10000) {\n              throw new Error(\"Post model outputs failed, status: \" + response.status.description);\n          }\n  \n          // Since we have one input, one output will exist here.\n          const output = response.outputs[0];\n  \n          console.log(\"Predicted concepts:\");\n          for (const concept of output.data.concepts) {\n              console.log(concept.name + \" \" + concept.value);\n          }\n      }\n  );\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <Particles className='particles'\n              params={particlesOptions}\n            />\n        <Navigation/>\n        <Logo/>\n        <Rank/>\n        <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit}/>\n        {/* {\n        \n        <FaceRecognition/>} */}\n      </div>\n    );\n  \n}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}